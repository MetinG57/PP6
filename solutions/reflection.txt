Aufgabe 1:
1. Unterschied zwischen printf und echo in Bash:
- echo ist einfacher, fügt automatisch einen Zeilenumbruch hinzu und kann Escape-Sequenzen inkonsistent behandeln.
- printf bietet präzise Formatierung mit Spezifizierern (%s, %.1f) und fügt keinen Zeilenumbruch hinzu, außer mit \n.

2. Rolle von ~/.bashrc:
- Konfigurationsdatei für interaktive Bash-Shells, definiert Umgebungsvariablen, Aliase und den Prompt.

3. Sourcing vs. Ausführen:
- Sourcing (source ~/.bashrc) führt das Skript in der aktuellen Shell aus, Änderungen bleiben bestehen.
- Ausführen (./print.sh) startet eine Subshell, Änderungen beeinflussen die Hauptshell nicht.




Aufgabe 2: GAS Printing
1. Was ist ein File Descriptor und wie verwendet ihn das Betriebssystem?
- Ein File Descriptor ist eine Zahl, die eine offene Datei oder Ressource (z. B. stdin, stdout, Dateien) im Betriebssystem identifiziert. Das Betriebssystem verwendet ihn, um Lese- oder Schreiboperationen auf diese Ressource auszuführen. Zum Beispiel ist 1 der File Descriptor für stdout.

2. Wie kann man einen File Descriptor für eine andere Ressource (z. B. Datei oder Socket) erhalten oder duplizieren?
- Einen neuen File Descriptor erhält man durch Systemaufrufe wie open() für Dateien oder socket() für Netzwerkverbindungen. Duplizieren kann man mit dup() oder dup2(), um einen bestehenden File Descriptor auf eine neue Nummer zu kopieren.

3. Was passiert, wenn man einen ungültigen File Descriptor in einem Systemaufruf verwendet?
- Ein ungültiger File Descriptor (z. B. nicht geöffnet oder außerhalb des gültigen Bereichs) führt zu einem Fehler, oft mit errno=EBADF (Bad File Descriptor). Das Programm kann abstürzen oder einen Fehlercode zurückgeben.





Aufgabe 3: C Printing
1. Mit objdump -d print_c die Assembler-Anweisungen für printf finden:
- Mit `objdump -d print_c` hab ich den Assembler-Code angeschaut. In der main()-Funktion sieht man die printf-Aufrufe. Für jeden printf gibt’s push-Befehle, um die Argumente (z. B. "Hallo aus C!" oder 42) auf den Stack zu legen, und dann einen call zu __printf. Die genauen Befehle hängen von der C-Bibliothek ab.

2. Warum ist die Syntax anders als bei GAS? NASM vs. GAS:
- GAS benutzt AT&T-Syntax, z. B. %eax für Register und movl %ebx, %eax. NASM nutzt Intel-Syntax, wo Register ohne % (z. B. eax) sind und die Reihenfolge umgedreht ist (mov eax, ebx). GAS passt zu Linux-Tools wie gcc, NASM ist oft für eigene Projekte. In objdump seh ich GAS-Syntax, weil gcc GAS verwendet.

3. Wie kann man fprintf nutzen, um auf stdout und in eine Datei zu schreiben? Beispiel:
- fprintf schreibt in Streams wie stdout oder Dateien. Beispiel:
  ```c
  #include <stdio.h>
  int main(void) {
      FILE *file = fopen("output.txt", "w");
      if (file == NULL) {
          printf("Datei konnte nicht geöffnet werden!\n");
          return 1;
      }
      fprintf(stdout, "Ausgabe auf Bildschirm!\n");
      fprintf(file, "Ausgabe in Datei!\n");
      fclose(file);
      return 0;
  }
